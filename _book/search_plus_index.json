{"./":{"url":"./","title":"Introduction","keywords":"","body":"IntroductionIntroduction console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"OpenIM服务端部署文档v1.0.8.html":{"url":"OpenIM服务端部署文档v1.0.8.html","title":"OpenIM服务端部署文档v1.0.8","keywords":"","body":"前 言【简介】【注意事项】【准备工作】部署Open-IM-Server开源核心一、安装依赖组件（仅首次部署时需要）1、进入Open-IM-Server目录，编辑.env2、修改IM离线推送配置 config/usualConfig.yaml，以下是个推配置示例（组件密码会根据.env自动生成）3、修改业务配置 config/config.yaml（包括离线配置、生成IM管理员账号、云存储配置、单群最大人数等）4、修改业务配置docker-compose_cfg/config.yaml5、单群最大人数配置pkg/common/constant/constant.go6、安装组件并启动（ETCD、MySQL、MongoDB、Redis、Kafka、Minio）7、检查组件二、编译Open-IM-Server1、确保Go版本至少为1.15。2、下载SDK-Core源码到服务器3、设置脚本权限4、编译源码三、启动Open-IM-Server部署Open-IM-Enterprise业务核心1、修改配置项2、设置脚本权限、停止服务3、编译服务4、启动服务5、检测服务配置线路和服务地址1、配置线路2、配置服务地址3、验证验证方法【检查服务】【验证minio存储】【验证三方云存储】更换mino域名1、修改配置文件2、停止服务3、编译服务4、启动服务5、验证更换云存储修改离线推送配置清理离线消息前 言 【简介】 OpenIM服务端包括Open-IM-Server（开源核心）和Open-IM-Enterprise（业务核心）两部分，本文档是以单机docker-compose方式部署。 【注意事项】 1、请仔细按文档流程操作，跳一步可能就会失败。 2、修改.yaml配置文件要遵循文件格式（如: 后有空格）。 【准备工作】 1、运行环境：linux系统即可，Ubuntu 7.5.0-3ubuntu1~18.04最优，root用户 2、机器资源：如果用户量小于10万，可用单机部署，建议最低8C 16G （使用minio需要优秀的网络带宽和至少IT普通磁盘） 3、开放9090端口（minio）、10001至10010端口，具体可参考下文【端口开放及访问路由】 4、安装go/git/docker/docker-compose 可参考https://doc.rentsoft.cn/#/component/docker 部署Open-IM-Server开源核心 一、安装依赖组件（仅首次部署时需要） 1、进入Open-IM-Server目录，编辑.env USER=root #不用修改 PASSWORD=AFn1a6nfid7lup7kS1 # 密码不能包括任何特殊符号（如@#等）且至少8位，仅对redis mysql mongo三个组件密码生效 ENDPOINT=http://127.0.0.1:10005 # 用minio存储需要填写外网ip:10005或https://域名 DATA_DIR=./ # 指定大磁盘目录 2、修改IM离线推送配置 config/usualConfig.yaml，以下是个推配置示例（组件密码会根据.env自动生成） getui: pushUrl: \"https://restapi.getui.com/v2/$appId\" masterSecret: \"g00Z1P65VO9InOnp2\" #需添加 appKey: \"4UwKSLHtOCAu9DC5\" #需添加 enable: true #true启动个推推送 3、修改业务配置 config/config.yaml（包括离线配置、生成IM管理员账号、云存储配置、单群最大人数等） （1）27行 mongo离线消息配置（按需设置） dbRetainChatRecords: 5 # mongo保存离线消息时间（天） chatRecordsClearTime: \"0 3 * * *\" # 每天凌晨3点清除消息 （2）116行credential 云存储配置（以下是腾讯云示例） tencent: appID: 1312026995 region: ap-hongkong bucket: opim-mantianxing-qwe-1312026995 secretID: AKIDa1B6kMiodBRQAeqlPmshFXYJn0wby5vU secretKey: JM8dqmSrzqRkmX2GCsHQIsBE0yg7HAl7 （3）258行生成IM管理员，建议用以下配置： manager: #app管理员userID和对应的secret appManagerUid: [ \"xfIM123456\",\"xfIM654321\", \"xfIM333\", \"xfIMAdmin\"] secrets: [ \"xfIM111111\",\"xfIM222222\", \"xfIM333333\", \"xfIMAdmin\"] appSysNotificationName: \"系统通知\" （4）371-768行notification中所有switch设为false（关闭不必要的通知） switch: false 4、修改业务配置docker-compose_cfg/config.yaml （1）12行生成后台管理员，建议用以下配置： # 默认管理员账号 admin: defaultAccount: account: [ \"admin1\", \"admin2\" ] defaultPassword: [ \"XF123456\", \"XF123456\" ] openIMUserID: [ \"xfIM123456\", \"xfIMAdmin\" ] faceURL: [ \"\", \"\" ] nickname: [ \"admin1\", \"admin2\" ] level: [ 1, 100 ] （2）50行oss云存储配置（以下是腾讯云示例，use表示使用的云存储类型） tencent: BucketURL: \"\" serviceURL: https://opim-man-qwe.cos.accelerate.myqcloud.com secretID: \"AKIDa1B6kMiodBRXYJn0wby5vU\" secretKey: \"JM8dqmSrzqRkmXsBE0yg7HAl7\" sessionToken: \"\" bucket: \"opim-mantianxing-qwe-131995\" use: \"tencent\" 5、单群最大人数配置pkg/common/constant/constant.go # 362行 MaxNotificationNum = 5000 #（设为5000，官方建议不超过1万） 6、安装组件并启动（ETCD、MySQL、MongoDB、Redis、Kafka、Minio） chmod +x install_im_server.sh; ./install_im_server.sh; 如果安装失败时，只能停止docker-compose并删除组件文件夹components，然后从第一步重新开始；生产环境禁止删除（组件中包含数据库） 7、检查组件 cd script; ./docker_check_service.sh 出现 all services launch success 表示所有组件启动成功。 二、编译Open-IM-Server 1、确保Go版本至少为1.15。 2、下载SDK-Core源码到服务器 cd Open-IM-Server/cmd/ git clone https://github.com/OpenIMSDK/openim-sdk-core.git --recursive mv openim-sdk-core/ Open-IM-SDK-Core/ 3、设置脚本权限 cd ../script/ chmod +x *.sh 4、编译源码 ./batch_build_all_service.sh #出现all services launch success表示服务启动成功 三、启动Open-IM-Server 1、启动服务 cd script ./start_all.sh 2、检查服务 ./check_all.sh # 出现all services launch success表示服务启动成功 【nginx配置参考】官方文档： https://doc.rentsoft.cn/#/v2/server_deploy/easy_deploy_new?id=%e4%ba%94%e3%80%81nginx%e9%85%8d%e7%bd%ae%e5%8f%82%e8%80%83 【端口开放及访问路由】官方文档： https://doc.rentsoft.cn/#/v2/server_deploy/easy_deploy_new?id=%e5%85%ad%e3%80%81%e7%ab%af%e5%8f%a3%e5%bc%80%e6%94%be%e5%8f%8a%e8%ae%bf%e9%97%ae%e8%b7%af%e7%94%b1 部署Open-IM-Enterprise业务核心 1、修改配置项 cd Open-IM-Enterprise/ vi config/config.yaml # 将etcd中的secret改成组件密码（Open-IM-Server目录.env中的密码） 2、设置脚本权限、停止服务 cd script If 首次部署 { chmod +x *.sh # 设置脚本权限 else { ./stop_all.sh # 停止服务 } 3、编译服务 ./batch_build_all_service.sh 出现all services build success 表示编译完成 4、启动服务 ./start_rpc_service.sh 5、检测服务 ./check_all.sh 配置线路和服务地址 1、配置线路 在第三方云平台配置线路json，参考格式如下： { \"data\":{ \"lines\":[ { \"base_url\":\"https://域名\", \"remark\":\"app线路一\" }, { \"base_url\":\"https://域名\", \"remark\":\"app线路二\" } ] }, \"errCode\":true } 注意：如果首次配置json，需要将json的url地址发给客户端。 2、配置服务地址 登录管理后台-应用管理-登录全局配置（参下图：配置服务地址），填写： 图片存储引擎：cos、minio（按需选择） wsURL地址配置：wss://域名/msg_gateway apiURL地址配置：https://域名/api registerURL地址配置：https://域名/chat configURL地址配置：https://域名/complete_admin 备注：后台账号参见上文 docker-compose_cfg/config.yaml中的配置，如果没改就是：admin1 / XF123456 3、验证 参见下文： 验证方法 图：配置服务地址 验证方法 【检查服务】 cd script ./check_all.sh 出现 all services launch success 代表服务正常 【验证minio存储】 1、管理后台验证：设置-个人设置-头像-点击上传（参见下图），图片显示说明正常（如果异常可通过浏览器调试工具查看图片域名是否正确）。 2、客户端验证：登录web版（或移动端）更改自己头像或发送图片消息验证。 【验证三方云存储】 由于web版暂未接入三方云存储，只能登录安卓/苹果版，修改个人头像或发送图片消息验证（账号可以在客户端注册或管理后台用户管理中添加）。 更换mino域名 1、修改配置文件 （1）config/config.yaml 123行minio配置项： endpoint: #minio外网地址，给客户端访问的 endpointInner: #minio官网建议内网（外网也行） （备注：如果换了存储桶，还需要修改相关配置项） （2）config/usualConfig.yaml 23行minio配置项： endpoint: # 同上 （备注：如果换了accessKeyID，还需要修改相关配置项） 2、停止服务 cd Open-IM-Server/script/ ./stop_all.sh 3、编译服务 ./batch_build_all_service.sh 4、启动服务 ./start_all.sh 5、验证 参见上文：验证方法 更换云存储 1、修改配置文件 （1）config/config.yaml 116行credential配置项（以下是腾讯云示例） tencent: appID: 1312026995 region: ap-hongkong bucket: opim-mantianxing-qwe-1312026995 secretID: AKIDa1B6kMiodBRQAeqlPmshFXYJn0wby5vU secretKey: JM8dqmSrzqRkmX2GCsHQIsBE0yg7HAl7 （2）docker-compose_cfg/config.yaml 50行oss配置项（以下是腾讯云示例，use表示使用哪个云存储） tencent: BucketURL: \"\" serviceURL: https://opim-man-qwe.cos.accelerate.myqcloud.com secretID: \"AKIDa1B6kMiodBRXYJn0wby5vU\" secretKey: \"JM8dqmSrzqRkmXsBE0yg7HAl7\" sessionToken: \"\" bucket: \"opim-mantianxing-qwe-131995\" use: \"tencent\" 2、停止服务 cd Open-IM-Server/script/ ./stop_all.sh 3、编译服务 ./batch_build_all_service.sh 4、启动服务 ./start_all.sh 5、验证 参见上文：验证方法 修改离线推送配置 1、修改配置文件 如需【更换离线推送配置】修改config/usualConfig.yaml，以下是个推配置示例： getui: pushUrl: \"https://restapi.getui.com/v2/$appId\" masterSecret: \"g00Z1P65VO9InOnp2\" #需添加 appKey: \"4UwKSLHtOCAu9DC5\" #需添加 enable: true #true启动个推推送 如需【关闭APP不必要的通知】修改config/config.yaml 371-768行，将notification中所有switch设为false 2、停止服务 cd Open-IM-Server/script/ ./stop_all.sh 3、编译服务 ./batch_build_all_service.sh 4、启动服务 ./start_all.sh 5、检查服务 ./check_all.shshell 出现 all services launch success 代表服务正常 6、验证功能 只能通过移动端验证。 清理离线消息 说明：通过此配置，可以定期清理用户的离线消息。 1、修改配置文件 config/config.yaml 27行mongo离线消息配置（按需填写） dbRetainChatRecords: 5 # mongo保存离线消息时间（天） chatRecordsClearTime: \"0 3 * * *\" # 每天凌晨3点清除消息 2、停止服务 cd Open-IM-Server/script/ ./stop_all.sh 3、编译服务 ./batch_build_all_service.sh 4、启动服务 ./start_all.sh 5、检查服务 ./check_all.sh 出现 all services launch success 代表服务正常 6、检验功能 只能通过用户端验证。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Nginx常用配置.html":{"url":"Nginx常用配置.html","title":"Nginx常用配置","keywords":"","body":"用Nginx做端口转发（反向代理）将域名转发到本地端口将域名转发到另一个域名本地一个端口转发到另一个端口或另一个域名加 / 与不加 /nginx解决多个端口映射80的配置注意:nginx 301重定向 设置http协议的重定向用Nginx做端口转发（反向代理） 有时我们会使用一些java或node应用，但又不想让他们直接监听80端口，这时就需要用到端口转发 本文中，我们介绍Nginx如何做端口转发，还有各种转发规则 将域名转发到本地端口 首先介绍最常用的，将域名转发到本地另一个端口上 server{ listen 80; server_name tomcat.shaochenfeng.com; index index.php index.html index.htm; location / { proxy_pass http://127.0.0.1:8080; # 转发规则 proxy_set_header Host $proxy_host; # 修改转发请求头，让8080端口的应用可以受到真实的请求 proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } 这样访问 http://tomcat.shaochenfeng.com 时就会转发到本地的 8080 端口 将域名转发到另一个域名 server{ listen 80; server_name baidu.shaochenfeng.com; index index.php index.html index.htm; location / { proxy_pass http://www.baidu.com; proxy_set_header Host $proxy_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } 这样访问 http://baidu.shaochenfeng.com 时就会转发到 http://www.baidu.com 本地一个端口转发到另一个端口或另一个域名 server{ listen 80; server_name 127.0.0.1; # 公网ip index index.php index.html index.htm; location / { proxy_pass http://127.0.0.1:8080; # 或 http://www.baidu.com proxy_set_header Host $proxy_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } 这样访问 http://127.0.0.1 时就会转发到本地的 8080 端口或 http://www.baidu.com 加 / 与不加 / 在配置proxy_pass代理转发时，如果后面的url加/，表示绝对根路径；如果没有/，表示相对路径 例如 加 / server_name shaochenfeng.com location /data/ { proxy_pass http://127.0.0.1/; } 访问 http://shaochenfeng.com/data/index.html 会转发到 http://127.0.0.1/index.html 不加 / server_name shaochenfeng.com location /data/ { proxy_pass http://127.0.0.1; } 访问 http://shaochenfeng.com/data/index.html 会转发到 http://127.0.0.1/data/index.ht nginx解决多个端口映射80的配置 server { listen 80; server_name xx.cn; #域名1 location / { proxy_pass http://x.x.x.x:9001; #域名1需要映射到80端口的服务端口 } } server { listen 80; server_name xx.cn; #域名2 location / { proxy_pass http://xx.xx.xx.xx:7300; #域名2需要映射到80端口的服务端口 } } 注意: 俩个server服务要相对独立，这样就可以同时将服务1和服务2的端口映射到80端口了 nginx 301重定向 设置 在nginx中配置，使得访问不带www的网址自动重定向到带www的域名。 http协议的重定向 在nginx官方文档中有如下示例代码： console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"jenkins部署.html":{"url":"jenkins部署.html","title":"jenkins部署","keywords":"","body":"确认是否能安装docker安装docker启动docker更改docker镜像源加入阿里云源地址重新读取配置重启docker安装jenkinsJenkins初始化处理插件安装失败自动升级安装必要的插件配置jenkinsjenkins 构建后传输文件到服务器确认是否能安装docker  Docker要求CentOS系统的内核版本高于3.10.通过uname -r命令查看你当前的内核版本。 uname -r [root@CentOS ~]# 3.10.0-1160.83.1.el7.x86_64 安装docker [root@baota-1 ~]# yum install docker 启动docker systemctl start docker 更改docker镜像源 [root@baota-1 ~]# vim /etc/docker/daemon.json 加入阿里云源地址 {\"registry-mirrors\":[\"https://6kx4zyno.mirror.aliyuncs.com\"]} 重新读取配置 [root@baota-1 ~]# systemctl daemon-reload 重启docker [root@baota-1 ~]# systemctl restart docker 安装jenkins 下载jenkins镜像 docker pull jenkins 启动jenkins  设置端口为9090并映射jenkins_home到宿主机/home/jenkins_home。 [root@baota-1 jenkins_home]# docker run -d --name jenkins -p 19898:8080 -v /data/jenkins_home:/var/jenkins_home jenkins  可以通过docker ps查看运行的容器。 docker ps 把玩jenkins docker镜像遇到的volume权限问题  在运行启动jenkins的命令时，可能会出现jenkins无法启动情况。  可以通过docker logs 镜像名称查看启动日志。 [root@baota-1 jenkins_home]# docker logs d8e206fa477f  查看输出的日志，如果出现 Permission denied 类似的错误。需要删除旧容器重新运行。 [root@baota-1 jenkins_home]# docker rm jenkins  运行命令加入了-u 0重新运行。 [root@baota-1 jenkins_home]# docker run -d --name jenkins -p 19898:8080 -v /data/jenkins_home:/var/jenkins_home -u 0 jenkins Jenkins初始化  启动成功后输入 http://服务器:9090/  如果无法访问，请检查一下防火墙端口是否开放，如果是云服务器还需要检查安全组设置  首次启动jenkins需要输入密码，需要进入容器内获取密码。密码位于/var/jenkins_home/secrets/initialAdminPassword。 进入容器 [root@baota-1 secrets]# docker exec -it jenkins /bin/bash 获取密码 root@fd12fe04aaf7:/var/jenkins_home# cat /var/jenkins_home/secrets/initialAdminPassword  由于我们将/var/jenkins_home -- 挂载到--> /home/jenkins_home所以也可以直接cat /home/jenkins_home/secrets/initialAdminPassword 获取密码。   输入密码以后，安装需要的插件，在安装途中由于网络原因会出现有些插件安装失败，这个可以不用理会。 不论你选什么，都会出现这个 解决方案 [root@baota-1 data]# docker stop jenkins [root@baota-1 data]# docker stop jenkins [root@baota-1 data]# rm -rf /data/jenkins_home/ [root@baota-1 data]# docker pull jenkins/jenkins [root@baota-1 jenkins_home]# docker run -d --name jenkins -p 19898:8080 -v /data/jenkins_home:/var/jenkins_home jenkins/jenkins [root@baota-1 data]# chmod 777 /data/jenkins_home [root@baota-1 data]# docker run -d --name jenkins -p 19898:8080 -v /data/jenkins_home:/var/jenkins_home jenkins/jenkins [root@baota-1 data]# docker start jenkins   输入密码以后，安装需要的插件，在安装途中由于网络原因会出现有些插件安装失败，这个可以不用理会。 设置jenkins的默认登录账号和密码 处理插件安装失败   进入jenkins的主页面右上角可能会出现一些报错信息，主要是提示jenkins 需要的某些插件没有安装，或者说jenkins版本太低了，插件无法使用这个时候我们需要先升级jenkins做一个升级。 自动升级 Jenkins提供了自动升级的方式 手动升级  可以去Jenkins的官网下载好最新jar包上传到服务器，也可以使用wget命令。 wget http://jenkins新版本的下载地址 #目前最新2.239 wget http://updates.jenkins-ci.org/download/war/2.239/jenkins.war   Jenkins的更新主要是替换jenkins镜像里面的war包 ，我们可以把下载好的war包使用docker cp直接进行复制命令如下： docker cp jenkins.war jenkins:/usr/share/jenkins  重新启动Jenkins即可完成升级。 docker restart jenkins 安装必要的插件 Localization: Chinese (Simplified) 1.0.14 汉化包 搜索关键字 chinese Publish Over SSH 1.20.1 搜索关键字 ssh DingTalk 钉钉通知 2.3.0 配置jenkins 全局工具配置   主要配置 jdk、maven、git等常用环境。需要注意配置的别名，后续构建将会使用到。 配置jdk   因为jenkins镜像自带jdk所以无需安装直接使用即可，进入Jenkins容器，使用java -verbose查看java安装路径。 docker exec -it jenkins /bin/bash java -verbose 配置git  进入容器内使用whereis git即可查询到git安装路径。 root@6a9fbb129cbe:~# whereis gitgit: /usr/bin/git /usr/share/man/man1/git.1.gzroot@6a9fbb129cbe:~# jenkins 构建后传输文件到服务器 在部署前端项目的时候需要将打包生成的dist文件夹传输到服务器特定目录。而链接服务器的时候需要用到ssh，所以需要一个关键的插件 publish-over-ssh 该插件可以去插件管理进行安装。 以下为具体步骤： 安装publish-over-ssh插件 进入系统管理 -> 系统配置 -> SSH Servers, 设置好name、HostName、UserName、Remote Directory；点高级，根据情况，可以设置密码或者ssh key。其它的无需更改。 进入你的项目，点击左侧配置，找到 绑定 根据情况可以配置以下两项 image.png 。ssh server选择刚才添加的server。在transfer中设置 以下选项 image.png 各个参数的意思分别如下： source files： 源文件。如果要传输文件夹内所有文件和文件夹则需要在文件夹路径后加两个*符号，如上图所示； Remove Prefix：移除前缀，是指源文件的前缀，比如现在我们只是传输html文件夹里的所有文件，但是html文件夹本身不需要在远程服务器出现，那么就需要将其移除，如上图所示； Remote directory 远程服务器目录，注意该目录是相对于刚刚系统设置里ssh servers里设置的路径 exec command 在传输完成后执行的命令，一般为清理文件、复制文件、重启一些服务等等。 至此，已经配置完毕。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"linux命令笔记.html":{"url":"linux命令笔记.html","title":"linux命令笔记","keywords":"","body":"Linux常用操作11服务第一，技术第二查看端口和进程后台运行防火墙发送http请求查找SCP文件传输解压文件操作重命名CDNLinux文本三剑客grepawksed日志taillessmoreheadcatvimLinux常用操作11 服务第一，技术第二 查看端口和进程 1）lsof -i:端口号，即可查看某一端口的占用情况， 2)netstat -lntup | grep 端口号 用于查看指定端口号的进程情况， ps aux --sort -pmem|head find / -name 'tomcat7' -type d find / -name 'server.xml' -print 后台运行 nohup command & 防火墙 systemctl status firewalld firewall-cmd --state systemctl start firewalld firewall-cmd --zone=public --add-port=8000/tcp --permanent firewall-cmd --reload netstat -ntlp netstat -ntulp |grep 8000 systemctl stop firewalld sudo systemctl restart service 发送http请求 # 如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地 curl “http://www.baidu.com” wget “http://www.baidu.com” curl -d “param1=value1&param2=value2” “http://www.baidu.com” wget --post-data ‘param1=value1&param2=value2’ http://www.baidu.com curl模拟的访问请求一般直接在控制台显示，而wget则把结果保存为一个文件。 如果结果内容比较少，需要直接看到结果可以考虑使用curl进行模拟请求，如果返回结果比较多，则可考虑wget进行模拟请求。 查找 find / -type f -name \"*.log\" | xargs grep \"ERROR\" find . -name \"*.log\" | xargs grep \"error\" 一、查看 nginx 安装目录 ps -ef | grep nginx 二、查看配置文件 nginx.conf 路径 nginx -t 这条命令也可以用于检查配置文件是否正确。 从 / 根目录下查找文件名为 nginx.conf 的文件 find / -name nginx.conf 查找当前目录下名为 file.txt 的文件： find . -name file.txt find / -name \"Open-IM*\" SCP文件传输 1、从服务器上下载文件 scp username@servername:/path/filename /var/www/local_dir（本地目录） scp root@192.168.0.101:/var/www/test.txt 把192.168.0.101上的/var/www/test.txt的文件下载到/var/www/local_dir（本地目录） 2、上传本地文件到服务器 scp /path/filename username@servername:/path 例如scp /var/www/test.php root@192.168.0.101:/var/www/ 把本机/var/www/目录下的test.php文件上传到192.168.0.101这台服务器上的/var/www/目录中 3、从服务器下载整个目录 scp -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录） 例如:scp -r root@192.168.0.101:/var/www/test /var/www/ 4、上传目录到服务器 scp -r local_dir username@servername:remote_dir 例如：scp -r test root@192.168.0.101:/var/www/ 把当前目录下的test目录上传到服务器的/var/www/ 目录 注：目标服务器要开启写入权限。 scp传文件指定端口 在Linux中, 两台主机传送文件的时候, 经常用到scp命令. 通常情况下, ssh的默认端口都会自定义, 介绍一下指定端口号的方法: scp -P port file_name user@ip:/dir_name -P: 大写的P, 指定端口号 file_name: 指本机的文件路径, 绝对路径相对路径都可 user: 远程主机的一个可用的用户名 ip: 远程主机ip dir_name: 远程的一个user可以写入文件的目录 实例: scp -P 2233 get_info.sh liemer@192.168.76.52:/usr/local/src 注意: 选项-P的位置, 尽量直接放在scp命令之后, 否则可能有错误. 解压 # unzip [选项] 压缩包名 unzip dir1.zip # 解压到指定位置 unzip -d /tmp/ ana.zip # 解压tar包 tar xvf filename 文件操作 [root@localhost ~]# mv 【选项】 源文件 目标文件 选项： -f：强制覆盖，如果目标文件已经存在，则不询问，直接强制覆盖； -i：交互移动，如果目标文件已经存在，则询问用户是否覆盖（默认选项）； -n：如果目标文件已经存在，则不会覆盖移动，而且不询问用户； -v：显示文件或目录的移动过程； -u：若目标文件已经存在，但两者相比，源文件更新，则会对目标文件进行升级； 【例 1】移动文件或目录。 [root@localhost ~]# mv cangls /tmp #移动之后，源文件会被删除，类似剪切 [root@localhost ~]# mv -f cangls /tmp #就算 /tmp/ 目录下已经存在同名的文件，由于\"-f\"选项的作用，所以会强制覆盖 [root@localhost ~]# mv -vn bols cangls lmls /tmp/、 \"lmls\"->\"/tmp/lmls\" #再向 /tmp/ 目录中移动同名文件，如果使用了 \"-n\" 选项，则可以看到只移动了 lmls，而同名的 bols 和 cangls 并没有移动（\"-v\" 选项用于显示移动过程） 【例 4】改名。 如果源文件和目标文件在同一目录中，那就是改名。例如： [root@localhost ~]# mv bols lmls #把 bols 改名为 lmls 目录也可以按照同样的方法改名。 重命名 1、使用“mv”命令进行重命名 mv a.txt b.txt 已经存在了重命名的文件了，接着想把某个文件再重命名为该文件，则会提示是否要进行重新命名已存在的文件。 mv -i a.txt b.txt 此外，“可以通过“mv”命令来对一个文件进行重命名，并把文件的后缀名进行修改。例如把“a.txt”文件重命名为“b.log”文件： mv a.txt b.log 2、使用“cp”命令进行重命名 例如我们想把“a.txt”文件重命名为“b.txt”文件， 我们先使用“cp”命令将“a.txt”文件拷贝到“b.txt”文件中，具体代码如下： cp a.txt b.txt 接着使用“rm”命令删除“a.txt”文件即可完成文件的重命名，具体代码如下： rm a.txt CDN CDN开启了HTTPS，源站是否必须配置HTTPS？ 总之，客户端访问CDN节点和CDN节点访问源站，是两段不同的链路。 CDN开启HTTPS对客户端访问CDN节点有效，源站配置HTTPS对CDN节点访问源站有效。 因此，CDN开启HTTPS，是对源站信息的端口配置决定的，不强制要求源站配置HTTPS。 不过，建议CDN和源站都开启HTTPS，确保全链路的安全。 Linux文本三剑客 grep awk sed sed 's/要被取代的字串/新的字串/g' testfile sed -n '5,10p' filename 日志 tail tail -f /n xxx.file less less [参数] 文件 [pagedown]： 向下翻动一页 [pageup]： 向上翻动一页 G - 移动到最后一行 g - 移动到第一行 Q 退出less 命令 more head cat vim 快捷键 功能 u 撤销最后的操作 Ctrl+r 重做最后撤销的操作 /search_text 检索文档，在文档后面的部分搜索 search_text ?search_text 检索文档，在文档前面的部分搜索 search_text dd 删除该行/剪切当前行 yy 复制当前行至存储缓冲区 复制粘贴 按下 v 来选择字符。（也可以用 V 来选择整行，Ctrl-v 来选择矩形块） 按下 y 来复制。 按下 p 粘贴。（或者 P 粘贴在当前光标位置之前）。 剪切粘贴， 按下 v 来选择字符。（也可以用 V 来选择整行，Ctrl-v 来选择矩形块） 按下 d 来剪切。 按下 p 粘贴。（或者 P 粘贴在当前光标位置之前）。 vim跳转到指定的行 :n （跳转到文件第n行，需要回车） 如果只是临时显示vim的行号，只须按ESC键退出编辑内容模式，输入“：set number”后按回车键，就可以显示行号了。行号显示只是暂时的，退出vim后再次打开vim就不显示行号了 :set nu 清理磁盘 Linux 查看磁盘空间 df -h # du -sh * du 的英文原义为 disk usage，含义为显示磁盘空间的使用情况，用于查看当前目录的总大小。 例如查看当前目录的大小： console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Yeaning使用文档.html":{"url":"Yeaning使用文档.html","title":"Yeaning使用文档","keywords":"","body":"一、配置1、数据源1-1、创建数据源1-2、编辑数据源2、用户2-1、创建用户2-2、编辑用户2-3、用户赋权3、权限组4、工单流程4-1、创建流程4-2、数据源应用该流程二、使用1、工单1-1、工单提交1-2、工单审批/执行1-3、回滚工单生成1-4、自动化任务2、查询2-1、提交2-2、审核3、审计一、配置 1、数据源 1-1、创建数据源 重点名词释义: 流程 赋予该新建数据源已有的审核流程(非查询) 负责人 该用户为数据源实际负责人，且当查询审核开启后由该负责人负责该数据源的查询审批 类型 当前类型共分三种:1.读写(既可以被查询也可以被执行),2.写(仅执行),3.读(仅查询) 1-2、编辑数据源 重点名词释义: 排除数据库 选择需要排除的数据库并保存后，该数据库将不会出现在提交工单/查询页面的数据库选择下拉框中。 脱敏字段 输入脱敏字段后该数据源下匹配的该字段数据(大小写敏感)将不会显示在查询结果中。 2、用户 2-1、创建用户 2-2、编辑用户 点击编辑按钮可编辑改用户行数据,如下所示: 重点名词释义: 1.审计人 当用户为审计人角色时，将可查看审计页面下相关信息。 2-3、用户赋权 点击权限按钮即可对该用户进行赋权。可以同时将多个权限组赋予用户，用户的权限将根据所赋予的1个或多个权限组权限计算并去重后获得。 3、权限组 权限组内权限共分为DDL权限(表结构修改)，DML权限（表数据变更），Query权限（查询）共三大类。 TIP 当某一个数据源类型为读写时，该数据源将会出现在所有三大类权限列表中 读时仅会出现在Query权限表中 写时仅会出现在DDL/DML权限表中 4、工单流程 4-1、创建流程 进入 管理->流程 页面，点击新建流程按钮 Yearning 最多支持7层的审核流程，但必须注意的是流程的开头必然是提交人阶段，流程的结束必然是执行阶段。否则将会导致流程错乱！ 名词释义: 流程名称 (顾名思义) 阶段名称 (当前设置的流程阶段的名称) 阶段类型 (当前阶段的类型,共分两种:1.审核,2.执行) 审核人员 (指定当前阶段审核人员范围,可多选) 添加 (点击后将该阶段添加至流程中) 步骤添加后并不代表该流程已创建成功，点击保存按钮后即可保存 更改流程时请确保该环境下的工单都已处理完毕，否则可能会引起流程错乱！ 如没有将对应环境配置流程则用户无法对这个环境进行任何DDL/DML工单提交操作 4-2、数据源应用该流程 创建完流程后，在 管理->数据源 处找到需要赋予流程的数据源，将流程添加到该数据源中并点击保存。 TIP 只有当数据源被赋予了流程之后,该数据源才被允许提交审批工单。 二、使用 1、工单 1-1、工单提交 点击工单申请页面，根据实际提单需求选择DML/DDL/Query中的某一类进行工单提交。 点击对应数据源卡片进入工单提交页面 布局介绍 页面左侧 当选择对应数据表之后点击获取表结构按钮将会展示该数据表字段及索引信息 定时执行 该功能依赖Yearning所部署服务器上本地时间，请将服务器时间与本地使用时间保持一致，否则将会出现错误。同时，由于Yearning并未依赖其他第三方定时服务，如在定时执行时间之前Yearning崩溃/重启将会丢失定时信息导致工单无法执行。 当是否回滚选项选择为 是 时，该工单提交的SQL语句执行时如果该数据库开启binlog则会自动生成对应的回滚语句并保存。 页面右侧 右上SQL编辑框 请将需要提交的SQL语句填写入该编辑框内，鼠标右键菜单中选择 SQL检测 按钮进行SQL语句检测或通过 SQL美化 按钮进行SQL语句美化 右下审核结果区域 当点击 SQL检测 按钮后该区域将会展示该SQL语句的检测结果。 TIP 当焦点处于编辑器中时，可以采用Ctrl/Cmd + E 快捷键触发SQL检测 当焦点处于编辑器中时，可以采用Ctrl/Cmd + B 快捷键触发SQL美化 同时该编辑器支持常用文本快捷键 提交按钮只有在检测语句 错误等级 均为0时才会激活 1-2、工单审批/执行 进入 审核->工单 页面选择需要审批的工单点击详情按钮进入该工单审核详情页 布局介绍 页面上侧 工单基本信息展示 审核按钮 页面下侧 工单流程及进度 SQL语句展示 鼠标右键菜单中选择 SQL检测 按钮进行SQL语句检测或通过 SQL美化 按钮进行SQL语句美化 SQL语句审核结果 TIP 当焦点处于编辑器中时，可以采用Ctrl/Cmd + E 快捷键触发SQL检测 当焦点处于编辑器中时，可以采用Ctrl/Cmd + B 快捷键触发SQL美化 同时该编辑器支持常用文本快捷键 同意按钮只有在检测语句 错误等级 均为0时才会激活 当流程最后节点人员通过后Yearning将会自动执行该工单 1-3、回滚工单生成 工单执行成功且开启生成回滚语句时，如需对执行的SQL进行回滚操作 请点击该工单详情页 结果栏 点击 提交回滚语句之后将会生成一个新的工单(包含此回滚语句)重新走完流程后即可执行自动化任务 1-4、自动化任务 自动执行任务: 用户可通过该功能设置自动执行任务。当提交的dml语句符合相应任务条件。将会自动执行，无需审核人审核。 该功能仅限dml语句使用。请慎重使用！ 2、查询 2-1、提交 点击工单申请页面，选择Query类进行查询。 如开启查询审核功能将进入如下界面： TIP 查询审核开启后需要在查询前提交查询申请经由数据源负责人审批通过后方可查询，且同一时间只能申请一个数据源进行查询操作(可申请的数据源为用户其所拥有的query权限数据源)。 如开启查询审核需要在申请时注明是否导出(且系统已开启查询导出功能)。 如查询审核功能未开启则系统开启查询导出功能后所有人员均可导出数据 未开启查询审核功能，用户仅可对其拥有query权限的数据源进行查询 由于查询采用websocket连接，如使用反向代理(nginx)请确保对websocket代理的正确配置 查询界面 2-2、审核 查询审核 数据源负责人通过 审核 -> 查询 页面查看需要审核的查询工单(未开启查询审核时工单将自动批准) 查询详情 点击对应查询工单详情按钮后进入，可查看该工单的基本信息以及执行的SQL语句。 3、审计 审计功能为具有审计人角色的用户提供平台工单/查询数据的审计支持。 如何使用审计功能 赋予审计用户审计人角色(用户页面) 审计用户重新登录后即可在导航栏处看到审计栏 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}